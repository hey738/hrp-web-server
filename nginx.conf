# Nginx 설정 파일 - Hospital Area Analysis

# 워커 프로세스 수 (CPU 코어 수에 맞춤, auto = 자동 감지)
worker_processes auto;

# 에러 로그 레벨
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    # 워커 프로세스당 최대 동시 접속 수
    worker_connections 1024;
}

http {
    # MIME 타입 설정
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 로그 포맷
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # 성능 최적화
    sendfile on;              # 파일 전송 최적화
    tcp_nopush on;            # 패킷 최적화
    tcp_nodelay on;           # 지연 최소화
    keepalive_timeout 65;     # Keep-Alive 타임아웃
    types_hash_max_size 2048; # MIME 타입 해시 테이블 크기

    # Gzip 압축 설정
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript
               application/json application/javascript application/xml+rss
               application/rss+xml font/truetype font/opentype
               application/vnd.ms-fontobject image/svg+xml;
    gzip_disable "msie6";

    # 업스트림 서버 정의 (FastAPI)
    upstream fastapi_backend {
        # Docker 네트워크 내부에서 web 서비스로 접근
        server web:8000;

        # 로드 밸런싱 설정 (나중에 여러 인스턴스 실행 시)
        # server web2:8000;
        # server web3:8000;
    }

    # 메인 서버 블록
    server {
        listen 80;
        server_name _;  # 모든 도메인 허용 (나중에 실제 도메인으로 변경)

        # 클라이언트 요청 크기 제한 (파일 업로드 대비)
        client_max_body_size 10M;

        # 타임아웃 설정
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # 루트 경로 (index.html)
        location = / {
            proxy_pass http://fastapi_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # 정적 파일 직접 서빙 (성능 최적화)
        location /static/ {
            alias /usr/share/nginx/html/static/;

            # 캐싱 설정
            expires 30d;
            add_header Cache-Control "public, immutable";

            # CORS 헤더 (필요시)
            add_header Access-Control-Allow-Origin *;

            # Gzip 압축 적용
            gzip_static on;
        }

        # API 엔드포인트 (FastAPI로 프록시)
        location ~ ^/(analyze|getPop|getRegionPop|getDrawingPop|health|cache) {
            proxy_pass http://fastapi_backend;
            proxy_http_version 1.1;

            # WebSocket 지원 (필요시)
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';

            # 프록시 헤더 설정
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # 캐시 우회
            proxy_cache_bypass $http_upgrade;

            # 타임아웃 (분석 작업이 오래 걸릴 수 있음)
            proxy_read_timeout 300s;
        }

        # 나머지 모든 요청 (FastAPI로 프록시)
        location / {
            proxy_pass http://fastapi_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # 헬스체크 엔드포인트
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # 에러 페이지
        error_page 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
}
